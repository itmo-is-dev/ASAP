@page "/adminpanel/identity/login"
@using Kysect.Shreks.WebUI.AdminPanel.Identity
@layout EmptyLayout
@inject IdentityStateProvider StateProvider
@inject NavigationManager NavigationManager
@attribute [AllowAnonymous]

<Div Flex="Flex.Column.JustifyContent.Center.AlignItems.Center" Height="Height.Is100">
    <Form Padding="Padding.Is5.FromTop" style="width: 30%">
        <Field>
            <TextEdit Placeholder="Username" @bind-Text="_username"/>
        </Field>

        <Field>
            <TextEdit Placeholder="Password" Role="@TextRole.Password" @bind-Text="_password"/>
        </Field>

        <Div Flex="Flex.JustifyContent.Center">
            <Button Color="Color.Primary"
                    Clicked="OnLoginButtonClickedAsync"
                    Type="@ButtonType.Submit"
                    PreventDefaultOnSubmit>
                Login
            </Button>
        </Div>
    </Form>

    <Modal @ref="_modal" Closing="@OnModalClosing">
        <ModalContent Centered>
            <ModalHeader>
                Login error occured
            </ModalHeader>
            <ModalBody>
                @_exception?.Message
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@CloseModal">Close</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
</Div>

@code {

    private string? _username;
    private string? _password;

    private Modal? _modal;

    private Exception? _exception;

    private async Task OnLoginButtonClickedAsync()
    {
        if (_username is null || _password is null)
            return;

        try
        {
            await StateProvider.LoginAsync(_username, _password, default);
            NavigationManager.NavigateTo("/", true);
        }
        catch (Exception e)
        {
            _exception = e;
            await (_modal?.Show() ?? Task.CompletedTask);
        }
    }

    private Task OnModalClosing(ModalClosingEventArgs e)
    {
        _exception = null;
        return Task.CompletedTask;
    }

    private Task CloseModal()
        => _modal?.Hide() ?? Task.CompletedTask;

}