@using Kysect.Shreks.WebApi.Sdk
@using Kysect.Shreks.WebUI.AdminPanel.ExceptionHandling
@inject IStudentClient Client
@inject ISafeExecutor SafeExecutor

<Accordion>
    <Collapse id="@ToggleId" Visible="@_visible" type="button" @onclick="@Toggle">
        <CollapseHeader>
            <Div Flex="Flex.JustifyContent.Between">
                <div @onclick:stopPropagation="true">

                    <Button Clicked="Add"
                            Color="Color.Primary"
                            Disabled="@(IsFull || _isExecuting)"
                            Style="z-index: 1000">

                        Add Filter
                    </Button>

                </div>

                @if (_isExecuting is false)
                {
                    <Button Clicked="ExecuteAsync"
                            Color="Color.Success">
                        Execute
                    </Button>
                }
                else
                {
                    <Button Clicked="Cancel"
                            Color="Color.Danger">

                    </Button>
                }
            </Div>
        </CollapseHeader>

        <div @onclick:stopPropagation="true">
            <CollapseBody Padding="Padding.Is2.FromTop.Is0.FromBottom">
                @foreach (var parameter in Parameters)
                {
                    <StudentQueryParameterComponent Parameter="@parameter" Parent="@this"/>
                }
            </CollapseBody>
        </div>

    </Collapse>
</Accordion>

@if (_isExecuting)
{
    <LoaderComponent/>
}

<StudentTableComponent Students="_students"/>

@code
{
        private const string ToggleId = "collapse-toggle";

    private ICollection<StudentDto>? _students;
    private bool _visible;
    private bool _isExecuting;

    private CancellationTokenSource _cts = new CancellationTokenSource();

    private void Toggle(MouseEventArgs obj)
    {
        if (_isExecuting)
            return;

        _visible = !_visible;
    }

    private void Cancel()
    {
        _cts.Cancel();
        _cts = new CancellationTokenSource();
    }

    private async Task ExecuteAsync()
    {
        _isExecuting = true;

        await using (var builder = SafeExecutor.Execute(async () => { _students = await Client.QueryAsync(Build(), _cts.Token); }))
        {
            builder.Title = "Failed to execute query";
        }

        _isExecuting = false;
    }
}