@using Kysect.Shreks.WebUI.AdminPanel.ExceptionHandling
@using Kysect.Shreks.WebUI.AdminPanel.SafeExecution
@using Kysect.Shreks.Application.Dto.SubjectCourses
@using Kysect.Shreks.Application.Dto.Study
@inject ISubjectCourseClient Client
@inject ISafeExecutor SafeExecutor

<Card Margin="Margin.Is2">
    <CardBody>
        <CardTitle>
            <Bar Padding="Padding.Is0"
                 Mode="BarMode.Horizontal"
                 Breakpoint="Breakpoint.Desktop"
                 Background="Background.Transparent">

                <BarBrand>
                    <Heading Size="HeadingSize.Is2">
                        @SubjectCourse?.Title
                    </Heading>
                </BarBrand>

                <BarMenu>
                    <BarEnd>
                        <BarItem Margin="Margin.Is2">
                            <ForceSyncGoogle SubjectCourseId="SubjectCourse?.Id"/>
                        </BarItem>

                        @{
                            string? organizationName = GithubOrganizationName;
                        }

                        @if (organizationName is not null)
                        {
                            <BarItem Margin="Margin.Is2">
                                <ForceSyncGitHubMentors OrganizationName="@organizationName"/>
                            </BarItem>
                        }

                    </BarEnd>
                </BarMenu>
            </Bar>
        </CardTitle>

        @if (SubjectCourse is not null)
        {
            <AssociationsComponent Associations="SubjectCourse.Associations"/>
        }

        <Divider/>

        <Tabs SelectedTab="@_selectedTab">
            <Items>
                <Tab Clicked="() => OnSelectedTabChanged(nameof(_assignments))" Name="@nameof(_assignments)">
                    Assignments
                </Tab>

                <Tab Clicked="() => OnSelectedTabChanged(nameof(_subjectCourseGroups))" Name="@nameof(_subjectCourseGroups)">
                    Groups
                </Tab>
            </Items>

            <Content>
                <TabPanel Name="@nameof(_assignments)">
                    <AssignmentsComponent Assignments="_assignments"/>
                </TabPanel>

                <TabPanel Name="@nameof(_subjectCourseGroups)">
                    <SubjectCourseGroupsComponent SubjectCourseGroups="_subjectCourseGroups"/>
                </TabPanel>
            </Content>
        </Tabs>

    </CardBody>
</Card>

@code
{

    [Parameter]
    public SubjectCourseDto? SubjectCourse { get; set; }

    private IReadOnlyCollection<AssignmentDto>? _assignments;
    private IReadOnlyCollection<SubjectCourseGroupDto>? _subjectCourseGroups;

    private string? _selectedTab;

    private string? GithubOrganizationName => SubjectCourse?
        .Associations
        .FirstOrDefault(x => x.Type is "GithubSubjectCourseAssociation")?
        .Value;

    private Task OnSelectedTabChanged(string arg)
    {
        _selectedTab = _selectedTab == arg ? null : arg;

        return _selectedTab switch
        {
            nameof(_assignments) => ProcessAssignmentsSelected(),
            nameof(_subjectCourseGroups) => ProcessSubjectCourseGroupsSelected(),
            _ => Task.CompletedTask
            };
    }

    private async Task ProcessAssignmentsSelected()
    {
        if (SubjectCourse is null || _assignments is not null)
            return;

        await using ISafeExecutionBuilder builder = SafeExecutor.Execute(async () => { _assignments = await Client.GetAssignmentsAsync(SubjectCourse.Id); });
    }

    private async Task ProcessSubjectCourseGroupsSelected()
    {
        if (SubjectCourse is null || _subjectCourseGroups is not null)
            return;

        await using ISafeExecutionBuilder builder = SafeExecutor.Execute(async () => { _subjectCourseGroups = await Client.GetGroupsAsync(SubjectCourse.Id); });
    }

}