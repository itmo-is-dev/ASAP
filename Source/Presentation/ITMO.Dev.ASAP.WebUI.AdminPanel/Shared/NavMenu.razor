@inject IIdentityManager IdentityManager
@inject ISafeExecutor Executor
@inject NavigationManager NavigationManager
@using ITMO.Dev.ASAP.WebUI.AdminPanel.Identity
@using ITMO.Dev.ASAP.WebUI.AdminPanel.ExceptionHandling
@implements IDisposable

<Bar Breakpoint="Breakpoint.Desktop"
     Background="Background.Light"
     ThemeContrast="ThemeContrast.Light">

    <BarBrand>
        <Anchor To="/" TextColor="TextColor.Dark">
            ASAP
        </Anchor>
    </BarBrand>

    <BarToggler/>

    <BarMenu>
        <BarStart>
            @if (_hasIdentity)
            {
                <BarItem>
                    <BarLink @ref="_globalLink" To="@GlobalPath">Global</BarLink>
                </BarItem>

                <BarItem>
                    <BarLink @ref="_subjectsLink" To="@SubjectsPath">Subjects</BarLink>
                </BarItem>

                <BarItem>
                    <BarLink @ref="_studentsLink" To="@StudentsPath">Students</BarLink>
                </BarItem>

                <BarItem>
                    <BarLink @ref="_groupsLink" To="@GroupsPath">Groups</BarLink>
                </BarItem>
            }
        </BarStart>

        <BarEnd>
            @if (_hasIdentity)
            {
                <BarItem>
                    <BarLink To="logout">Logout</BarLink>
                </BarItem>
            }
        </BarEnd>
    </BarMenu>
</Bar>

@code {

        private const string GlobalPath = "adminpanel/global";
        private const string SubjectsPath = "adminpanel/subjects";
        private const string StudentsPath = "adminpanel/students";
        private const string GroupsPath = "adminpanel/groups";

    private bool _hasIdentity;

    private BarLink? _globalLink;
    private BarLink? _subjectsLink;
    private BarLink? _studentsLink;
    private BarLink? _groupsLink;

    protected override async Task OnInitializedAsync()
    {
        _hasIdentity = await IdentityManager.HasIdentityAsync(default);
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    public void Dispose() { }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        var uri = new Uri(NavigationManager.Uri);

        BaseComponent? component = uri.AbsolutePath switch
        {
            GlobalPath => _globalLink,
            SubjectsPath => _subjectsLink,
            StudentsPath => _studentsLink,
            GroupsPath => _groupsLink,
            _ => null,
            };

        if (component is not null)
            Activate(component);
    }

    private void Activate(BaseComponent component)
    {
#pragma warning disable BL0005
    // Component parameter 'Class' should not be set outside of its component.
        component.Class = $"active {component.Class}";
#pragma warning restore BL0005
    }

}