@page "/adminpanel/subjects"
@layout PaddedLayout
@using ITMO.Dev.ASAP.WebUI.AdminPanel.ExceptionHandling
@using ITMO.Dev.ASAP.Application.Dto.Study
@using ITMO.Dev.ASAP.WebUI.AdminPanel.Authorization
@using ITMO.Dev.ASAP.WebUI.AdminPanel.Components.Subjects
@using ITMO.Dev.ASAP.WebUI.AdminPanel.Extensions
@inject ISubjectClient SubjectClient
@inject ISafeExecutor SafeExecutor
@inject ICurrentUser CurrentUser

@if (_subjects is not null)
{
    <Div Flex="Flex.Row.JustifyContent.Between">
        <Heading Size="HeadingSize.Is2">
            Subjects
        </Heading>

        @if (CurrentUser.HasModeratorAccess())
        {
            <CreateButton Clicked="@(() => _createSubjectModal?.ShowAsync() ?? Task.CompletedTask)"/>
        }

    </Div>

    <Div>
        @foreach (var subject in _subjects.OrderBy(x => x.Title.Length))
        {
            <SubjectInfoComponent Subject=@subject/>
        }
    </Div>

    @if (CurrentUser.HasModeratorAccess())
    {
        <CreateSubjectModal @ref="_createSubjectModal" OnSuccess="OnSubjectCreated"/>
    }
}
else
{
    <LoaderComponent/>
}


@code {
    private ICollection<SubjectDto>? _subjects;
    private CreateSubjectModal? _createSubjectModal;

    protected override async Task OnInitializedAsync()
    {
        await using var builder = SafeExecutor.Execute(async () =>
        {
            IReadOnlyCollection<SubjectDto> subjects = await SubjectClient.GetAsync();
            _subjects = subjects.ToList();
        });

        builder.Title = "Failed to load subjects";
        builder.ShowExceptionDetails = true;
    }

    private Task OnSubjectCreated(SubjectDto subject)
    {
        _subjects?.Add(subject);
        return Task.CompletedTask;
    }

}