@page "/adminpanel/subjects/{subjectId:guid}"
@using ITMO.Dev.ASAP.WebUI.AdminPanel.ExceptionHandling
@using ITMO.Dev.ASAP.Application.Dto.SubjectCourses
@using ITMO.Dev.ASAP.WebUI.AdminPanel.Authorization
@using ITMO.Dev.ASAP.WebUI.AdminPanel.Components.SubjectCourse
@using ITMO.Dev.ASAP.WebUI.AdminPanel.Extensions
@inject ISubjectClient SubjectClient
@inject ISafeExecutor SafeExecutor
@inject NavigationManager NavigationManager
@inject ICurrentUser CurrentUser

@if (_courses is not null)
{
    <Div Display="Display.Flex" Flex="Flex.Column.AlignContent.Start">
        <Div Flex="Flex.Row.JustifyContent.Between.AlignContent.Center">
            <Heading Size="HeadingSize.Is1">
                Courses
            </Heading>

            @if (CurrentUser.HasModeratorAccess())
            {
                <Div Flex="Flex.Column.JustifyContent.Center">
                    <CreateButton Clicked="@(() => _createSubjectCourseModal?.ShowAsync() ?? Task.CompletedTask)"/>
                </Div>
            }
        </Div>

        <Div>
            @foreach (var course in _courses)
            {
                <SubjectCourseComponent SubjectCourse="@course"/>
            }
        </Div>
    </Div>


    @if (CurrentUser.HasModeratorAccess())
    {
        <CreateSubjectCourseModal @ref="_createSubjectCourseModal"
                                  SubjectId="SubjectId"
                                  OnSuccess="OnSubjectCourseCreated"/>
    }
}
else
{
    <LoaderComponent/>
}

@code {

    private ICollection<SubjectCourseDto>? _courses;
    private CreateSubjectCourseModal? _createSubjectCourseModal;

    [Parameter]
    public Guid SubjectId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await using var builder = SafeExecutor.Execute(async () =>
        {
            IReadOnlyCollection<SubjectCourseDto> courses = await SubjectClient.GetCoursesAsync(SubjectId);
            _courses = courses.ToList();
        });

        builder.Title = "Failed to load subject course";

        builder.OnFailAsync<Exception>(_ =>
        {
            NavigationManager.NavigateTo("/");
            return Task.CompletedTask;
        });
    }

    private Task OnSubjectCourseCreated(SubjectCourseDto course)
    {
        _courses?.Add(course);
        return Task.CompletedTask;
    }

}