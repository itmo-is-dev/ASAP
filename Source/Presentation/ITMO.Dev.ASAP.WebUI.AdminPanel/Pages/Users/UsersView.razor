@page "/adminpanel/users"
@using ITMO.Dev.ASAP.Application.Dto.Users
@using ITMO.Dev.ASAP.WebUI.AdminPanel.Extensions
@using ITMO.Dev.ASAP.WebUI.AdminPanel.Components.Users
@using ITMO.Dev.ASAP.WebUI.AdminPanel.Components.Query
@using ITMO.Dev.ASAP.Application.Dto.Querying
@inject IUserClient UserClient
@attribute [Authorize(Roles = "Admin, Moderator")]

<Heading Size="HeadingSize.Is2">
    Users
</Heading>

<QueryComponent @ref="_usersQueryComponent"
                TParameter="UserQueryParameter"
                TValue="UserIdentityInfoDto"
                QueryExecutor="ExecuteQueryAsync">
    <ContentTable Context="users">
        <UsersPagePaginationComponent PageCount="_pageCount" CurrentPage="_page" OnPageChanged="i => SelectPageAsync(i)"/>

        <Table Margin="Margin.Is0">
            <TableHeader>
                <TableRow>
                    <TableHeaderCell>Name</TableHeaderCell>
                    <TableHeaderCell>Action</TableHeaderCell>
                </TableRow>
            </TableHeader>
            <TableBody>
                @foreach (var user in users)
                {
                    <TableRow>
                        <TableRowCell>@user.Value.FullName()</TableRowCell>

                        @if (user.HasIdentity is false)
                        {
                            <TableRowCell>
                                <Div Flex="Flex.Row.JustifyContent.Center">
                                    <Button Clicked="@(() => OpenCreateUserAsync(user.Value))" Color="Color.Primary">
                                        Create account
                                    </Button>
                                </Div>
                            </TableRowCell>
                        }

                    </TableRow>
                }
            </TableBody>
        </Table>
    </ContentTable>
</QueryComponent>

<UsersPagePaginationComponent PageCount="_pageCount" CurrentPage="_page" OnPageChanged="i => SelectPageAsync(i)"/>

<CreateUserAccoutModal @ref="_createUserAccountModal"/>

@code {
    private int? _page;
    private int _pageCount;
    private CreateUserAccoutModal? _createUserAccountModal;
    private QueryComponent<UserQueryParameter, UserIdentityInfoDto>? _usersQueryComponent;

    protected override async Task OnInitializedAsync()
    {
        await SelectPageAsync();
    }

    private async Task SelectPageAsync(int? page = null)
    {
        _page = page;
        await (_usersQueryComponent?.ExecuteAsync() ?? Task.CompletedTask);
    }

    private async Task<IReadOnlyCollection<UserIdentityInfoDto>> ExecuteQueryAsync(QueryConfiguration<UserQueryParameter> configuration)
    {
        var page = _page;
        _page = null;

        try
        {
            var response = await UserClient.GetUserIdentityInfosDto(configuration, page);
            _page = page;
            _pageCount = response.PageCount;

            return response.Users;
        }
        catch
        {
            _pageCount = 0;
            return Array.Empty<UserIdentityInfoDto>();
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task OpenCreateUserAsync(UserDto user)
        => await (_createUserAccountModal?.OpenAsync(user) ?? Task.CompletedTask);

}