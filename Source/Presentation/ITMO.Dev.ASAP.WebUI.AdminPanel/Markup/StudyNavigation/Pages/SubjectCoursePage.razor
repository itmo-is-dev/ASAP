@page "/adminpanel/courses/{subjectCourseId:guid}"
@using ITMO.Dev.ASAP.Application.Dto.SubjectCourses
@using ITMO.Dev.ASAP.WebUI.AdminPanel.Components.Assignments
@using ITMO.Dev.ASAP.WebUI.AdminPanel.ExceptionHandling
@using ITMO.Dev.ASAP.WebUI.AdminPanel.SafeExecution
@using ITMO.Dev.ASAP.WebUI.AdminPanel.Components.SubjectCourse
@using ITMO.Dev.ASAP.WebUI.AdminPanel.Components.SubjectCourseGroups
@using ITMO.Dev.ASAP.WebUI.AdminPanel.Components.Tabs
@using ITMO.Dev.ASAP.Application.Dto.Study
@using System.Web
@using ITMO.Dev.ASAP.WebUI.AdminPanel.Markup.StudyNavigation.Layouts
@using ITMO.Dev.ASAP.WebUI.AdminPanel.Markup.StudyNavigation.Providers
@inject ISubjectCourseClient SubjectCourseClient
@inject ISafeExecutor SafeExecutor
@inject ISubjectCourseProvider SubjectCourseProvider
@inject ISubjectProvider SubjectProvider
@layout SubjectCourseListLayout
@inject NavigationManager NavigationManager

@if (_course is not null)
{
    <Div Class="navigation-list__breadcrumb">
        <Breadcrumb>
            <BreadcrumbItem Class="navigation-list__breadcrumb__item" Style="max-width: 30%">
                <BreadcrumbLink To="/adminpanel/subjects">
                    Subjects
                </BreadcrumbLink>
            </BreadcrumbItem>
            <BreadcrumbItem Class="navigation-list__breadcrumb__item" Style="max-width: 35%">
                <BreadcrumbLink To="@($"/adminpanel/subjects/{_course.SubjectId}")">
                    @SubjectProvider.CurrentValue?.Title
                </BreadcrumbLink>
            </BreadcrumbItem>
            <BreadcrumbItem Active Class="navigation-list__breadcrumb__item" Style="max-width: 35%">
                @_course.Title
            </BreadcrumbItem>
        </Breadcrumb>
    </Div>

    <Div Padding="Padding.Is2"
         Flex="Flex.Column"
         Height="Height.Is100"
         Overflow="Overflow.Hidden">

        <AssociationsComponent Associations="_course.Associations"
                               SubjectCourse="_course"/>

        <Divider/>

        <Tabs SelectedTab="@_selectedTab">
            <Items>
                <DropdownTabTitleComponent OnClick="OnSelectedTabChanged" Name="@nameof(_assignments)">
                    <ButtonContent>
                        Assignments
                    </ButtonContent>
                    <DropdownContent>
                        <DropdownItem>
                            <CreateButton Clicked="@(() => _createAssignmentModal?.ShowAsync() ?? Task.CompletedTask)"
                                          Background="Background.Transparent"
                                          TextColor="TextColor.Body"
                                          FitContent="false"/>
                        </DropdownItem>
                    </DropdownContent>
                </DropdownTabTitleComponent>

                <DropdownTabTitleComponent OnClick="OnSelectedTabChanged" Name="@nameof(_subjectCourseGroups)">
                    <ButtonContent>
                        Groups
                    </ButtonContent>
                    <DropdownContent>
                        <DropdownItem>
                            <CreateButton Clicked="ShowAddSubjectCourseGroupsAsync"
                                          Background="Background.Transparent"
                                          TextColor="TextColor.Body"
                                          FitContent="false">
                                Add
                            </CreateButton>
                        </DropdownItem>
                    </DropdownContent>
                </DropdownTabTitleComponent>
            </Items>

            <Content>
                <TabPanel Name="@nameof(_assignments)">
                    <AssignmentsComponent Assignments="_assignments"/>
                </TabPanel>

                <TabPanel Name="@nameof(_subjectCourseGroups)">
                    <SubjectCourseGroupsComponent SubjectCourseGroups="_subjectCourseGroups"/>
                </TabPanel>
            </Content>
        </Tabs>
    </Div>


    <CreateAssignmentModal @ref="_createAssignmentModal"
                           SubjectCourseId="@_course?.Id"
                           OnSuccess="AddAssignmentAsync"/>

    <AddSubjectCourseGroupModal @ref="_addSubjectCourseGroupModal"
                                SubjectCourse="_course"
                                OnStudyGroupsAdded="AddSubjectCourseGroups"
                                ExistingGroups="_subjectCourseGroups"/>
}


@code {
    private SubjectCourseDto? _course;

    private ICollection<AssignmentDto>? _assignments;
    private ICollection<SubjectCourseGroupDto>? _subjectCourseGroups;

    private CreateAssignmentModal? _createAssignmentModal;
    private AddSubjectCourseGroupModal? _addSubjectCourseGroupModal;

    private string? _selectedTab;

    [Parameter]
    public Guid SubjectCourseId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await using ISafeExecutionBuilder<SubjectCourseDto> builder = SafeExecutor
            .Execute(() => SubjectCourseClient.GetAsync(SubjectCourseId));

        builder.Title = "Failed to load subject course";
        builder.OnSuccessAsync(OnSubjectCourseChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = HttpUtility.ParseQueryString(uri.Query);

        var selected = query.Get("selected") switch
        {
            "assignments" => nameof(_assignments),
            "groups" => nameof(_subjectCourseGroups),
            _ => null,
            };

        await OnSelectedTabChanged(selected);
    }

    private async Task OnSubjectCourseChanged(SubjectCourseDto course)
    {
        _course = course;
        SubjectCourseProvider.OnNext(course.Id);
        SubjectProvider.OnNext(course.SubjectId);

        _assignments = null;
        _subjectCourseGroups = null;

        var selected = _selectedTab;
        _selectedTab = null;

        await OnSelectedTabChanged(selected);
    }

    private Task AddAssignmentAsync(AssignmentDto assignment)
    {
        _assignments?.Add(assignment);
        return Task.CompletedTask;
    }

    private void AddSubjectCourseGroups(IReadOnlyCollection<SubjectCourseGroupDto> groups)
    {
        foreach (var group in groups)
        {
            _subjectCourseGroups?.Add(group);
        }
    }

    private Task OnSelectedTabChanged(string? arg)
    {
        if (_selectedTab == arg)
        {
            NavigationManager.NavigateTo($"/adminpanel/courses/{SubjectCourseId}");
            _selectedTab = null;

            return Task.CompletedTask;
        }

        _selectedTab = arg;

        return _selectedTab switch
        {
            nameof(_assignments) => ProcessAssignmentsSelected(),
            nameof(_subjectCourseGroups) => ProcessSubjectCourseGroupsSelected(),
            _ => Task.CompletedTask,
            };
    }

    private async Task ProcessAssignmentsSelected()
    {
        NavigationManager.NavigateTo($"/adminpanel/courses/{SubjectCourseId}?selected=assignments");

        if (_course is null || _assignments is not null)
            return;


        await using var builder = SafeExecutor.Execute(async () =>
        {
            IReadOnlyCollection<AssignmentDto> assignments = await SubjectCourseClient.GetAssignmentsAsync(_course.Id);
            _assignments = assignments.ToList();
        });
    }

    private async Task ProcessSubjectCourseGroupsSelected()
    {
        NavigationManager.NavigateTo($"/adminpanel/courses/{SubjectCourseId}?selected=groups");

        if (_course is null || _subjectCourseGroups is not null)
            return;

        await using var builder = SafeExecutor.Execute(async () =>
        {
            IReadOnlyCollection<SubjectCourseGroupDto> subjectCourseGroups = await SubjectCourseClient.GetGroupsAsync(_course.Id);
            _subjectCourseGroups = subjectCourseGroups.ToList();
        });
    }

    private async Task ShowAddSubjectCourseGroupsAsync()
    {
        if (_addSubjectCourseGroupModal is null)
            return;

        await ProcessSubjectCourseGroupsSelected();
        await _addSubjectCourseGroupModal.ShowAsync();
    }

}