@using ITMO.Dev.ASAP.Application.Dto.Study
@using ITMO.Dev.ASAP.WebApi.Abstractions.Models.GroupAssignments
@using ITMO.Dev.ASAP.WebApi.Sdk.ControllerClients
@using ITMO.Dev.ASAP.WebUI.Abstractions.ExceptionHandling
@using ITMO.Dev.ASAP.WebUI.Abstractions.SafeExecution
@inject IGroupAssignmentClient Client
@inject ISafeExecutor SafeExecutor

@if (Group is not null)
{
    <Card Margin="Margin.Is2">
        <CardHeader>
            <Heading Size="HeadingSize.Is2">
                @Group.GroupName
            </Heading>
        </CardHeader>

        <CardBody Padding="Padding.Is2">
            <Addons>
                <Addon AddonType="AddonType.Start">
                    <AddonLabel>Deadline</AddonLabel>
                </Addon>

                <Addon AddonType="AddonType.Body">

                    <DatePicker TValue="DateTime"
                                InputMode="DateInputMode.Date"
                                DateChanged="UpdateDeadline"
                                DisplayFormat="dd/MM/yyy"
                                Date="Group.Deadline"/>

                </Addon>
            </Addons>
        </CardBody>
    </Card>

    <ConfirmationComponent @ref=@_component
                           ActionName=@ActionName
                           Action=@Execute/>
}

@code {

    [Parameter]
    public AssignmentDto? Assignment { get; set; }

    [Parameter]
    public GroupAssignmentDto? Group { get; set; }

    private ConfirmationComponent? _component;

    private string ActionName => $"update {Group?.GroupName} {Assignment?.Title} deadline to {Group?.Deadline}";

    private Task UpdateDeadline(DateTime date)
    {
        if (Group is null)
            return Task.CompletedTask;

        Group = Group with { Deadline = date };
        return _component?.Show() ?? Task.CompletedTask;
    }

    private async Task Execute(CancellationToken cancellationToken)
    {
        if (Group is null || Assignment is null)
        {
            return;
        }

        var request = new UpdateGroupAssignmentRequest(Group.Deadline);

        await using ISafeExecutionBuilder<GroupAssignmentDto> builder = SafeExecutor
            .Execute(async () => await Client.UpdateGroupAssignmentAsync(Group.AssignmentId, Group.GroupId, request, cancellationToken));

        builder.Title = "Failed to update deadline";
        builder.ShowExceptionDetails = true;
    }

}