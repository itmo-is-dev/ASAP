@using ITMO.Dev.ASAP.Application.Dto.Study
@using ITMO.Dev.ASAP.WebApi.Abstractions.Models
@using ITMO.Dev.ASAP.WebApi.Sdk.ControllerClients
@using ITMO.Dev.ASAP.WebUI.Abstractions.ExceptionHandling
@using ITMO.Dev.ASAP.WebUI.Abstractions.SafeExecution
@inject IAssignmentClient AssignmentClient
@inject ISafeExecutor SafeExecutor

<Modal @ref="_modal">
    <ModalContent>
        <ModalHeader>
            <ModalTitle>Create assignment</ModalTitle>
            <CloseButton/>
        </ModalHeader>

        <ModalBody Padding="Padding.Is4">
            <TextField @ref="_title"
                       Label="Title"
                       Placeholder="Assignment title"
                       OnStateChanged="StateHasChanged"/>

            <TextField @ref="_shortName"
                       Label="Short name"
                       Placeholder="Assignment short name"
                       OnStateChanged="StateHasChanged"/>

            <NumericField T="@int"
                          @ref="_order"
                          Label="Order"
                          Placeholder="Assignment order"
                          OnStateChanged="StateHasChanged"/>

            <Fields>
                <NumericField T="@double"
                              @ref="_minPoints"
                              Label="Min points"
                              Placeholder="Minimal assignment points"
                              OnStateChanged="StateHasChanged"/>

                <NumericField T="@double"
                              @ref="_maxPoints"
                              Label="Max points"
                              Placeholder="Maximum assignment points"
                              OnStateChanged="StateHasChanged"/>
            </Fields>

            <CreateButton Clicked="@CreateAsync"
                          Disabled="@(ButtonEnabled is false)"/>
        </ModalBody>
    </ModalContent>
</Modal>

@code {

    private Modal? _modal;

    private TextField? _title;
    private TextField? _shortName;
    private NumericField<int>? _order;
    private NumericField<double>? _minPoints;
    private NumericField<double>? _maxPoints;

    private bool ButtonEnabled =>
        string.IsNullOrEmpty(_title?.Value) is false &&
        string.IsNullOrEmpty(_shortName?.Value) is false &&
        _order?.Value is not null &&
        _minPoints?.Value is not null &&
        _maxPoints?.Value is not null;

    [Parameter]
    public Guid? SubjectCourseId { get; set; }

    [Parameter]
    public EventCallback<AssignmentDto> OnSuccess { get; set; }

    public Task ShowAsync()
        => _modal?.Show() ?? Task.CompletedTask;

    private async Task CreateAsync()
    {
        if (SubjectCourseId is null ||
            string.IsNullOrEmpty(_title?.Value) ||
            string.IsNullOrEmpty(_shortName?.Value) ||
            _order?.Value is null ||
            _minPoints?.Value is null ||
            _maxPoints?.Value is null)
            return;

        await using ISafeExecutionBuilder<AssignmentDto> builder = SafeExecutor.Execute(async () =>
        {
            var request = new CreateAssignmentRequest(
                SubjectCourseId.Value,
                _title.Value,
                _shortName.Value,
                _order.Value.Value,
                _minPoints.Value.Value,
                _maxPoints.Value.Value);

            var assignment = await AssignmentClient.CreateAssignmentAsync(request);

            await (_modal?.Hide() ?? Task.CompletedTask);

            return assignment;
        });

        builder.Title = "Failed to create assignment";
        builder.OnSuccessAsync(OnSuccess.InvokeAsync);
    }

}