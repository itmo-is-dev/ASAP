@page "/adminpanel/subjects/{subjectId:guid}"
@using ITMO.Dev.ASAP.Application.Dto.Study
@using ITMO.Dev.ASAP.Application.Dto.SubjectCourses
@using ITMO.Dev.ASAP.WebUI.Abstractions.Authorization
@using ITMO.Dev.ASAP.WebUI.Abstractions.Extensions
@using ITMO.Dev.ASAP.WebUI.Abstractions.StudyNavigation
@using ITMO.Dev.ASAP.WebUI.Markup.SubjectCourse.Components
@layout SubjectListLayout
@inject ISubjectProvider SubjectProvider
@inject ICurrentUser CurrentUser
@implements IDisposable

<Div Class="navigation-list__breadcrumb">
    <Breadcrumb>
        <BreadcrumbItem Class="navigation-list__breadcrumb__item" Style="max-width: 50%">
            <BreadcrumbLink To="/adminpanel/subjects">
                Subjects
            </BreadcrumbLink>
        </BreadcrumbItem>
        <BreadcrumbItem Class="navigation-list__breadcrumb__item" Style="max-width: 50%">
            @_value?.Title
        </BreadcrumbItem>
    </Breadcrumb>
</Div>

<Div Flex="Flex.Row.JustifyContent.Between.AlignContent.Center">
    <Heading Size="HeadingSize.Is2" Padding="Padding.Is3.FromStart.Is2">
        Courses
    </Heading>

    @if (CurrentUser.HasModeratorAccess())
    {
        <Div Flex="Flex.Column.JustifyContent.Center" Padding="Padding.Is3.FromEnd.Is2">
            <CreateButton Clicked="@(() => _createSubjectCourseModal?.ShowAsync() ?? Task.CompletedTask)"/>
        </Div>
    }
</Div>


@if (CurrentUser.HasModeratorAccess())
{
    <CreateSubjectCourseModal @ref="_createSubjectCourseModal"
                              SubjectId="SubjectId"
                              OnSuccess="OnSubjectCourseCreated"/>
}

<SubjectCourseListComponent @ref="_subjectCourseList"/>

@code {

    private SubjectDto? _value;

    private IDisposable? _valueSubscription;
    private CreateSubjectCourseModal? _createSubjectCourseModal;
    private SubjectCourseListComponent? _subjectCourseList;

    [Parameter]
    public Guid SubjectId { get; set; }

    protected override void OnParametersSet()
    {
        SubjectProvider.OnNext(SubjectId);
        _valueSubscription = SubjectProvider.Value.Subscribe(OnSubjectUpdated);
        _value = SubjectProvider.CurrentValue;
    }

    public void Dispose()
    {
        _valueSubscription?.Dispose();
    }

    private void OnSubjectUpdated(SubjectDto value)
    {
        _value = value;
    }

    private Task OnSubjectCourseCreated(SubjectCourseDto course)
    {
        _subjectCourseList?.AddCourse(course);
        StateHasChanged();

        return Task.CompletedTask;
    }


}