@page "/adminpanel/subjects/{subjectId:guid}"
@using ITMO.Dev.ASAP.Application.Dto.Study
@using ITMO.Dev.ASAP.WebUI.Abstractions.Authorization
@using ITMO.Dev.ASAP.WebUI.Abstractions.Contracts.Structure.Subjects
@using ITMO.Dev.ASAP.WebUI.Abstractions.Contracts.Tools
@using ITMO.Dev.ASAP.WebUI.Abstractions.Extensions
@using ITMO.Dev.ASAP.WebUI.Abstractions.StudyNavigation
@using ITMO.Dev.ASAP.WebUI.Markup.SubjectCourse.Components
@using ITMO.Dev.ASAP.WebUI.Markup.Structure.SubjectCourses
@layout SubjectListLayout
@inject ICurrentUser CurrentUser
@inject ISubjectManager SubjectManager
@implements IDisposable

<Div Class="navigation-list__breadcrumb">
    <Breadcrumb>
        <BreadcrumbItem Class="navigation-list__breadcrumb__item" Style="max-width: 50%">
            <BreadcrumbLink To="/adminpanel/subjects">
                Subjects
            </BreadcrumbLink>
        </BreadcrumbItem>
        <BreadcrumbItem Class="navigation-list__breadcrumb__item" Style="max-width: 50%">
            @_value?.Title
        </BreadcrumbItem>
    </Breadcrumb>
</Div>

<Div Flex="Flex.Row.JustifyContent.Between.AlignContent.Center">
    <Heading Size="HeadingSize.Is2" Padding="Padding.Is3.FromStart.Is2">
        Courses
    </Heading>

    @if (CurrentUser.HasModeratorAccess())
    {
        <Div Flex="Flex.Column.JustifyContent.Center" Padding="Padding.Is3.FromEnd.Is2">
            <CreateButton Clicked="@(() => _createSubjectCourseModal?.ShowAsync() ?? Task.CompletedTask)"/>
        </Div>
    }
</Div>


@if (CurrentUser.HasModeratorAccess())
{
    <CreateSubjectCourseModal @ref="_createSubjectCourseModal"
                              SubjectId="SubjectId"/>
}

<SubjectCourseListComponent/>

@code {

    private SubjectDto? _value;

    private IDisposable? _subscription;
    private CreateSubjectCourseModal? _createSubjectCourseModal;

    [Parameter]
    public Guid SubjectId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _subscription = new SubscriptionBuilder()
            .Subscribe(SubjectManager.Subject.Subscribe(x => _value = x))
            .Build();

        await SubjectManager.SelectAsync(SubjectId);
    }

    public void Dispose()
    {
        _subscription?.Dispose();
    }

}