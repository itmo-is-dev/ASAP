@using ITMO.Dev.ASAP.Application.Dto.Study
@using ITMO.Dev.ASAP.WebApi.Abstractions.Models.Subjects
@using ITMO.Dev.ASAP.WebApi.Sdk.ControllerClients
@using ITMO.Dev.ASAP.WebUI.Abstractions.Contracts.Structure.Subjects
@using ITMO.Dev.ASAP.WebUI.Abstractions.Contracts.Tools
@using ITMO.Dev.ASAP.WebUI.Abstractions.ExceptionHandling
@using ITMO.Dev.ASAP.WebUI.Abstractions.SafeExecution
@implements IDisposable
@inject ISubjectManager ViewModel

<Modal @ref="_modal" VisibleChanged="OnVisibleChanged">
    @if (_contentVisible)
    {
        <ModalContent>
            <ModalHeader>
                <ModalTitle>Create subject</ModalTitle>
                <CloseButton/>
            </ModalHeader>

            <MediaBody>
                <Div Padding="Padding.Is4">

                    <TextField @ref="_subjectNameField"
                               Placeholder="Subject name"
                               OnStateChanged="StateHasChanged"/>

                    <Div Flex="Flex.JustifyContent.Center">
                        <Button Clicked="CreateSubject"
                                Background="Background.Primary"
                                TextColor="TextColor.White">
                            Create
                        </Button>
                    </Div>
                </Div>
            </MediaBody>
        </ModalContent>
    }
</Modal>

@code {

    private IDisposable? _subscription;

    private bool _contentVisible;

    private Modal? _modal;
    private TextField? _subjectNameField;

    private bool ButtonEnabled => _subjectNameField?.HasValue is true;

    [Parameter]
    public EventCallback<SubjectDto> OnSuccess { get; set; }

    public async Task ShowAsync()
    {
        await (_modal?.Show() ?? Task.CompletedTask);
    }

    protected override void OnParametersSet()
    {
        _subscription = ViewModel.SubjectCreated.Subscribe(_ => _modal?.Hide());
    }

    private async Task CreateSubject()
    {
        if (string.IsNullOrEmpty(_subjectNameField?.Value))
            return;

        await ViewModel.CreateAsync(_subjectNameField.Value, default);
    }

    private void OnVisibleChanged(bool visible)
    {
        _contentVisible = visible;
    }

    public void Dispose()
    {
        _subscription?.Dispose();
    }

}