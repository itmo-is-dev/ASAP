@page "/adminpanel/identity/login"
@using ITMO.Dev.ASAP.WebUI.Abstractions.Authorization
@using ITMO.Dev.ASAP.WebUI.Abstractions.ExceptionHandling
@using ITMO.Dev.ASAP.WebUI.Abstractions.Extensions
@layout EmptyLayout
@inject IPrincipalService PrincipalService
@inject NavigationManager NavigationManager
@inject ISafeExecutor SafeExecutor
@inject ICurrentUser CurrentUser
@attribute [AllowAnonymous]

<Div Flex="Flex.Column.JustifyContent.Center.AlignItems.Center"
     Height="Height.Is100">

    <Form Padding="Padding.Is5.FromTop"
          Width="Width.Is100"
          Style="max-width: 500px">

        <FocusTrap Active="true">
            <Field>
                <TextEdit Placeholder="Username" 
                          @bind-Text="_username" 
                          @bind-Disabled="@_loggingIn"/>
            </Field>

            <Field>
                <TextEdit Placeholder="Password" 
                          Role="@TextRole.Password" 
                          @bind-Text="_password" 
                          @bind-Disabled="@_loggingIn"/>
            </Field>
        </FocusTrap>

        <Div Flex="Flex.JustifyContent.Center">
            @if (_loggingIn is false)
            {
                <Button Color="Color.Primary"
                        Clicked="OnLoginButtonClickedAsync"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit>
                    Login
                </Button>
            }
            else
            {
                <LoaderComponent Size="25px"/>
            }
        </Div>
    </Form>
</Div>

@code {

    private string? _username;
    private string? _password;

    private bool _loggingIn;

    protected override void OnParametersSet()
    {
        if (CurrentUser.IsAuthenticated)
            NavigationManager.NavigateTo("/");
    }

    private async Task OnLoginButtonClickedAsync()
    {
        if (_username is null || _password is null)
            return;

        _loggingIn = true;

        await using var builder = SafeExecutor.Execute(() => PrincipalService.LoginAsync(_username, _password, default));

        builder.Title = "Login failed";

        builder.OnSuccessAsync(() =>
        {
            NavigationManager.NavigateTo("/");
            return Task.CompletedTask;
        });

        builder.OnFail(() => _loggingIn = false);
    }

}