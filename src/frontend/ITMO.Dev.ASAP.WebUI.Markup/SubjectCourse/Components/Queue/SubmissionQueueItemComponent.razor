@using ITMO.Dev.ASAP.WebUI.Abstractions.Models
@using ITMO.Dev.ASAP.Application.Dto.Tables
@using ITMO.Dev.ASAP.WebApi.Sdk.ControllerClients
@using ITMO.Dev.ASAP.WebUI.Abstractions.ExceptionHandling
@using ITMO.Dev.ASAP.WebUI.Abstractions.Extensions
@using ITMO.Dev.ASAP.WebUI.Abstractions.SafeExecution
@using ITMO.Dev.ASAP.Application.Dto.Study
@using ITMO.Dev.ASAP.WebApi.Sdk.HubClients
@using System.Reactive.Linq
@using ITMO.Dev.ASAP.WebApi.Abstractions.Models.Queue
@inject ISafeExecutor SafeExecutor
@inject ISubjectCourseClient SubjectCourseClient
@inject IHubClientProvider<IQueueHubClient> QueueHubProvider

@implements IAsyncDisposable

@if (CourseGroup is not null)
{
    <ListGroupItem
        type="button"
        onclick="@Clicked"
        Class="btn-light">

        @CourseGroup.Group.Name

    </ListGroupItem>

    <Modal
        @ref="_modal"
        @bind-Visible="_modalVisible"
        Closed="OnClosed">

        <ModalContent Size="ModalSize.Fullscreen">
            <ModalHeader>
                <ModalTitle>@CourseGroup.Group.Name</ModalTitle>
                <CloseButton/>
            </ModalHeader>

            @if (_queue is not null)
            {
                <ModalBody
                    Flex="Flex.Column"
                    Height="Height.Is100"
                    Overflow="Overflow.Hidden">

                    <Div Overflow="Overflow.Scroll">
                        <Table>
                            <TableHeader>
                                <TableRow>
                                    <TableRowCell>Name</TableRowCell>
                                    <TableRowCell>Group</TableRowCell>
                                    <TableRowCell>Assignment</TableRowCell>
                                    <TableRowCell>Date</TableRowCell>
                                    <TableRowCell>State</TableRowCell>
                                    <TableRowCell>Github</TableRowCell>
                                </TableRow>
                            </TableHeader>

                            <TableBody>
                                @foreach (var submission in _queue.Value.Submissions)
                                {
                                    <TableRow
                                        Style="@($"background-color: {SelectRowColor(submission.Submission)}")">

                                        <TableRowCell>@submission.Student.User.FullName()</TableRowCell>
                                        <TableRowCell>@submission.Student.GroupName</TableRowCell>
                                        <TableRowCell>@submission.Submission.AssignmentShortName</TableRowCell>

                                        <TableRowCell>
                                            @submission.Submission.SubmissionDate.ToString("dd.MM.yyyy hh:mm:ss")
                                        </TableRowCell>

                                        <TableRowCell>@submission.Submission.State</TableRowCell>

                                        <TableRowCell>
                                            <Blazorise.Link To="@submission.Submission.Payload">
                                                @submission.Submission.Payload
                                            </Blazorise.Link>
                                        </TableRowCell>
                                    </TableRow>
                                }
                            </TableBody>
                        </Table>
                    </Div>

                </ModalBody>
            }

        </ModalContent>

    </Modal>
}

@code {
    private Modal? _modal;
    private bool _modalVisible;

    private IDisposable? _queueUpdateSubscription;

    private SubmissionsQueueDto? _queue;

    [Parameter]
    public ExtendedSubjectCourseGroupDto? CourseGroup { get; set; }

    private async Task Clicked()
    {
        if (CourseGroup is null)
            return;

        await using ISafeExecutionBuilder<SubmissionsQueueDto> builder = SafeExecutor.Execute(() =>
        {
            var subjectCourseId = CourseGroup.SubjectCourseGroup.SubjectCourseId;
            var studentGroupId = CourseGroup.SubjectCourseGroup.StudentGroupId;

            return SubjectCourseClient.GetStudyGroupQueueAsync(subjectCourseId, studentGroupId);
        });

        builder.Title = "Failed to load queue";
        builder.OnSuccess(x => _queue = x);
        builder.OnSuccess(() => _modalVisible = true);
        builder.OnSuccessAsync(() => _modal?.Show() ?? Task.CompletedTask);
        builder.OnSuccessAsync(QueueUpdateSubscribeAsync);
    }

    private async Task QueueUpdateSubscribeAsync()
    {
        var courseGroup = CourseGroup;

        if (courseGroup is null)
            return;

        await using var builder = SafeExecutor.Execute(async () =>
        {
            var client = await QueueHubProvider.GetClientAsync();

            var subjectCourseId = courseGroup.SubjectCourseGroup.SubjectCourseId;
            var studentGroupId = courseGroup.SubjectCourseGroup.StudentGroupId;

            await client.QueueUpdateSubscribeAsync(subjectCourseId, studentGroupId, default);
        });

        builder.OnSuccessAsync(async () =>
        {
            var client = await QueueHubProvider.GetClientAsync();
            
            _queueUpdateSubscription = client.QueueUpdated
                .Where(x => x.SubjectCourseId.Equals(courseGroup.SubjectCourseGroup.SubjectCourseId))
                .Where(x => x.StudyGroupId.Equals(courseGroup.SubjectCourseGroup.StudentGroupId))
                .Select(x => x.Queue)
                .Subscribe(OnQueueUpdated);
        });
    }

    private void OnQueueUpdated(SubmissionsQueueDto queue)
    {
        _queue = queue;
        StateHasChanged();
    }

    private void OnClosed()
    {
        _queue = null;
    }

    private string SelectRowColor(SubmissionDto submission)
    {
        return submission.State is SubmissionStateDto.Reviewed
            ? "rgba(156, 235, 153, 1)"
            : "transparent";
    }

    public async ValueTask DisposeAsync()
    {
        _queueUpdateSubscription?.Dispose();

        if (CourseGroup is not null)
        {
            var client = await QueueHubProvider.GetClientAsync();
            
            await client.QueueUpdateUnsubscribeAsync(
                CourseGroup.SubjectCourseGroup.SubjectCourseId,
                CourseGroup.SubjectCourseGroup.StudentGroupId,
                default);
        }
    }

}