@using ITMO.Dev.ASAP.Application.Dto.Study
@using ITMO.Dev.ASAP.WebApi.Sdk.ControllerClients
@using ITMO.Dev.ASAP.WebUI.Abstractions.ExceptionHandling
@using ITMO.Dev.ASAP.WebUI.Abstractions.Extensions
@using ITMO.Dev.ASAP.WebUI.Abstractions.SafeExecution
@using ITMO.Dev.ASAP.WebUI.Markup.Assignments.Components
@using System.Globalization
@inject IAssignmentClient AssignmentClient
@inject ISafeExecutor SafeExecutor

@if (Assignment is not null)
{
    <Div Flex="Flex.Column"
         Margin="Margin.Is4.FromBottom"
         Style="gap: 10px">
        
        <Addons>
            <Addon AddonType="AddonType.Start">
                <AddonLabel>Min Points</AddonLabel>
            </Addon>
            <Addon AddonType="AddonType.Body">
                <NumericField @ref="_minPointsField"
                              T="@double"
                              MinValue="0"
                              Default="Assignment.MinPoints"
                              Margin="Margin.Is0"/>
            </Addon>
        </Addons>

        <Addons>
            <Addon AddonType="AddonType.Start">
                <AddonLabel>Max Points</AddonLabel>
            </Addon>
            <Addon AddonType="AddonType.Body">
                <NumericField @ref="_maxPointsField"
                              T="@double"
                              MinValue="0"
                              Default="Assignment.MaxPoints"
                              Margin="Margin.Is0"/>
            </Addon>
        </Addons>

        <Button Clicked="OnUpdateClicked"
                Style="width: fit-content">
            Update
        </Button>
    </Div>
}

@if (_groupAssignments is not null)
{
    <Div>
        @foreach (var group in _groupAssignments.OrderBy(x => x.GroupName))
        {
            <GroupAssignmentComponent Assignment="Assignment" Group="group"/>
        }
    </Div>
}

@code {

    [Parameter]
    public AssignmentDto? Assignment { get; set; }
    
    [Parameter]
    public EventCallback<AssignmentDto> OnAssignmentChanged { get; set; }

    private IReadOnlyCollection<GroupAssignmentDto>? _groupAssignments;

    private NumericField<double>? _minPointsField;
    private NumericField<double>? _maxPointsField;

    protected override async Task OnInitializedAsync()
    {
        if (Assignment is null)
            return;

        await using ISafeExecutionBuilder<IReadOnlyCollection<GroupAssignmentDto>> builder = SafeExecutor
            .Execute(async () => _groupAssignments = await AssignmentClient.GetGroupAssignmentsAsync(Assignment.Id));

        builder.Title = "Failed to load group assignments";
    }

    private async Task OnUpdateClicked()
    {
        if (Assignment is null
            || _minPointsField?.Value is null
            || _maxPointsField?.Value is null)
        {
            return;
        }

        await using var builder = SafeExecutor.Execute(() => AssignmentClient
            .UpdateAssignmentPointsAsync(Assignment.Id, _minPointsField.Value.Value, _maxPointsField.Value.Value));

        builder.Title = "Failed to update points";
        builder.OnSuccess(x => Assignment = x);
        builder.OnSuccessAsync(OnAssignmentChanged.InvokeAsync);
    }

}