@using ITMO.Dev.ASAP.WebUI.AdminPanel.ExceptionHandling
@using ITMO.Dev.ASAP.Application.Dto.SubjectCourses
@using ITMO.Dev.ASAP.Application.Dto.Study
@using ITMO.Dev.ASAP.Application.Dto.SubjectCourseAssociations
@using ITMO.Dev.ASAP.Github.Application.Dto.SubjectCourses
@using ITMO.Dev.ASAP.WebApi.Abstractions.Models.Github
@using ITMO.Dev.ASAP.WebApi.Sdk.ControllerClients
@using ITMO.Dev.ASAP.WebUI.AdminPanel.SafeExecution
@using ITMO.Dev.ASAP.WebUI.AdminPanel.Extensions
@using ITMO.Dev.ASAP.WebUI.AdminPanel.Components.Fields
@using SubjectCourseAssociationDto = ITMO.Dev.ASAP.Application.Dto.SubjectCourseAssociations.SubjectCourseAssociationDto
@inject ISubjectCourseClient SubjectCourseClient
@inject ISafeExecutor SafeExecutor

<Modal @ref="@_modal">
    <ModalContent>
        <ModalHeader>
            <ModalTitle>Create subject course</ModalTitle>
            <CloseButton/>
        </ModalHeader>

        <MediaBody>
            <Div Padding="Padding.Is4">
                <Field>
                    <FieldLabel>Name</FieldLabel>
                    <TextEdit Text="@_courseName"
                              Placeholder="Name"
                              TextChanged="x => _courseName = x"/>
                </Field>

                <Field>
                    <FieldLabel>Workflow type</FieldLabel>

                    <WorkflowTypeSelector Selected="@_workflowType"
                                          OnValueChanged="x => _workflowType = x"/>
                </Field>

                <Field>
                    <FieldLabel>GitHub</FieldLabel>

                    <TextEdit Text="@_github"
                              Placeholder="Organization Name"
                              TextChanged="x => _github = x"/>
                </Field>

                <Field>
                    <FieldLabel>Template repository</FieldLabel>

                    <TextEdit Text="@_templateRepository"
                              TextChanged="x => _templateRepository = x"/>
                </Field>

                <TextField @ref="_mentorTeam"
                           Label="Mentor team name"
                           Placeholder="Mentor team name"
                           OnStateChanged="StateHasChanged"/>

                <Div Flex="Flex.Row.JustifyContent.Center">
                    <Button Clicked="CreateAsync"
                            Disabled="@(ButtonEnabled is false)"
                            Background="Background.Primary"
                            TextColor="TextColor.White">
                        Create
                    </Button>
                </Div>
            </Div>
        </MediaBody>
    </ModalContent>
</Modal>

@code {
    private string? _courseName = null;
    private SubmissionStateWorkflowTypeDto? _workflowType = SubmissionStateWorkflowTypeDto.ReviewWithDefense;
    private string? _github = null;
    private string? _templateRepository = null;
    private TextField? _mentorTeam;

    private Modal? _modal;

    private bool ButtonEnabled =>
        string.IsNullOrEmpty(_courseName) is false &&
        _workflowType is not null &&
        string.IsNullOrEmpty(_github) == string.IsNullOrEmpty(_templateRepository);

    [Parameter]
    public Guid? SubjectId { get; set; }

    [Parameter]
    public EventCallback<SubjectCourseDto> OnSuccess { get; set; }

    public Task ShowAsync()
        => _modal?.Show() ?? Task.CompletedTask;

    private async Task CreateAsync()
    {
        if (SubjectId is null ||
            string.IsNullOrEmpty(_courseName) ||
            _workflowType is null ||
            string.IsNullOrEmpty(_github) ||
            string.IsNullOrEmpty(_templateRepository) ||
            string.IsNullOrEmpty(_mentorTeam?.Value))
            return;

        await using ISafeExecutionBuilder<GithubSubjectCourseDto> builder = SafeExecutor.Execute(async () =>
        {
            var createRequest = new CreateGithubSubjectCourseRequest(
                SubjectId.Value,
                _courseName,
                _workflowType.Value,
                _github,
                _templateRepository,
                _mentorTeam.Value);

            var course = await SubjectCourseClient.CreateForGithubAsync(createRequest);

            await (_modal?.Hide() ?? Task.CompletedTask);

            return course;
        });

        builder.Title = "Failed to create subject course";
        builder.OnSuccessAsync(OnSuccess.InvokeAsync);
    }

}