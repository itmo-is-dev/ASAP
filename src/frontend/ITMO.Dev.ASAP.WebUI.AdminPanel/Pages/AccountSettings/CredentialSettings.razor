@page "/adminpanel/account/credentials"
@using ITMO.Dev.ASAP.Application.Dto.Users
@using ITMO.Dev.ASAP.WebUI.AdminPanel.Authorization
@using ITMO.Dev.ASAP.WebUI.AdminPanel.ExceptionHandling
@using ITMO.Dev.ASAP.Application.Dto.Identity
@using ITMO.Dev.ASAP.WebApi.Sdk.ControllerClients
@using ITMO.Dev.ASAP.WebUI.AdminPanel.Extensions
@using ITMO.Dev.ASAP.WebUI.AdminPanel.SafeExecution
@layout AccountSettingsLayout
@inject ISafeExecutor SafeExecutor
@inject IPrincipalService PrincipalService
@inject IIdentityClient IdentityClient

<Div>
    <Card Flex="Flex.Column.JustifyContent.Start"
          Padding="Padding.Is2"
          Margin="Margin.Is2.FromBottom">

        <Heading Size="HeadingSize.Is4">
            Change username
        </Heading>

        <TextField @ref="_usernameField"
                   Placeholder="New username"
                   OnStateChanged="StateHasChanged"/>

        <Button Color="Color.Primary"
                Disabled="@(UpdateUsernameEnabled is false)"
                Clicked="OnUpdateUsernameClickedAsync">
            Update
        </Button>
    </Card>

    <Card Flex="Flex.Column.JustifyContent.Start"
          Padding="Padding.Is2">

        <Heading Size="HeadingSize.Is4">
            Change password
        </Heading>

        <TextField @ref="_currentPasswordField"
                   Placeholder="Current password"
                   Role="@TextRole.Password"/>

        <TextField @ref="_passwordField"
                   Placeholder="Password"
                   OnStateChanged="OnPasswordChanged"
                   FooterHidden="string.IsNullOrEmpty(_passwordValidationError)"
                   Role="@TextRole.Password">
            <Footer>
                <Div TextColor="TextColor.Danger">
                    @_passwordValidationError
                </Div>
            </Footer>
        </TextField>

        <TextField @ref="_confirmPasswordField"
                   Placeholder="Confirm password"
                   OnStateChanged="StateHasChanged"
                   FooterHidden="PasswordsIdentical"
                   Role="@TextRole.Password">
            <Footer>
                <Div TextColor="TextColor.Danger">
                    Passwords are not identical
                </Div>
            </Footer>
        </TextField>

        <Button Color="Color.Primary"
                Disabled="@(UpdatePasswordEnabled is false)"
                Clicked="OnUpdatePasswordClickedAsync">
            Update
        </Button>
    </Card>
</Div>

<ConfirmationComponent @ref="_updateUsernameConfirmation"
                       ActionName="update username"
                       Action="UpdateUsernameAsync"/>

<ConfirmationComponent @ref="_updatePasswordConfirmation"
                       ActionName="update password"
                       Action="UpdatePasswordAsync"/>

@code {
    private string? _passwordValidationError;

    private TextField? _usernameField;
    private TextField? _currentPasswordField;
    private TextField? _passwordField;
    private TextField? _confirmPasswordField;
    private ConfirmationComponent? _updateUsernameConfirmation;
    private ConfirmationComponent? _updatePasswordConfirmation;

    private bool UpdateUsernameEnabled => _usernameField?.HasValue is true;
    private bool PasswordValid => string.IsNullOrEmpty(_passwordValidationError);

    private bool UpdatePasswordEnabled =>
        PasswordValid
        && _currentPasswordField?.HasValue is true
        && _passwordField?.HasValue is true
        && _confirmPasswordField?.HasValue is true
        && PasswordsIdentical;

    private bool PasswordsIdentical =>
        (_passwordField?.HasValue, _confirmPasswordField?.HasValue) is (false, false)
        || string.Equals(_passwordField?.Value, _confirmPasswordField?.Value);

    [CascadingParameter]
    public UserDto? User { get; set; }

    public PasswordOptionsDto? PasswordOptions { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await using ISafeExecutionBuilder<PasswordOptionsDto> builder = SafeExecutor.Execute(() => IdentityClient.GetPasswordOptionsAsync());
        builder.Title = "Failed to load password options";
        builder.OnSuccess(x => PasswordOptions = x);
    }

    private async Task UpdateUsernameAsync(CancellationToken cancellationToken)
    {
        if (string.IsNullOrEmpty(_usernameField?.Value))
            return;

        await using var builder = SafeExecutor.Execute(
            () => PrincipalService.UpdateUsernameAsync(_usernameField.Value, default));

        builder.Title = "Failed to update username";
    }

    private async Task UpdatePasswordAsync(CancellationToken cancellationToken)
    {
        if (string.IsNullOrEmpty(_currentPasswordField?.Value) ||
            string.IsNullOrEmpty(_passwordField?.Value) ||
            UpdatePasswordEnabled is false)
        {
            return;
        }

        await using var builder = SafeExecutor.Execute(
            () => PrincipalService.UpdatePasswordAsync(_currentPasswordField.Value, _passwordField.Value, cancellationToken));

        builder.Title = "Failed to change password";
    }

    private async Task OnUpdateUsernameClickedAsync()
        => await (_updateUsernameConfirmation?.Show() ?? Task.CompletedTask);

    private async Task OnUpdatePasswordClickedAsync()
        => await (_updatePasswordConfirmation?.Show() ?? Task.CompletedTask);

    private void OnPasswordChanged()
    {
        string? reason = null;

        if (_currentPasswordField?.Value is not null
            && _passwordField?.Value is not null
            && _currentPasswordField.Value.Equals(_passwordField.Value, StringComparison.Ordinal))
        {
            _passwordValidationError = "New password cannot be equal to old password";
        }
        else
        {
            _ = PasswordOptions?.TryValidate(_passwordField?.Value ?? string.Empty, out reason) is true;
            _passwordValidationError = reason;
        }

        StateHasChanged();
    }

}